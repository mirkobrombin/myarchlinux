#!/usr/bin/env bash

## rofi-screenshot
## Author: ceuk @ github
## Edit: mirkobrombin @ github
## Licence: WTFPL

'''
Dependencies:
- xclip
- ffcast
- slop
- ffmpeg
'''

# Screenshot directory
screenshot_directory="$HOME/Pictures"

BORDER="#191919"
SEPARATOR="#191919"
FOREGROUND="#FFFFFF"
BACKGROUND="#191919"
BACKGROUND_ALT="#252525"
HIGHLIGHT_BACKGROUND="#039be5"
HIGHLIGHT_FOREGROUND="#191919"

BLACK="#000000"
WHITE="#ffffff"
RED="#e53935"
GREEN="#43a047"
YELLOW="#fdd835"
BLUE="#1e88e5"
MAGENTA="#00897b"
CYAN="#00acc1"
PINK="#d81b60"
PURPLE="#8e24aa"
INDIGO="#3949ab"
TEAL="#00897b"
LIME="#c0ca33"
AMBER="#ffb300"
ORANGE="#fb8c00"
BROWN="#6d4c41"
GREY="#757575"
BLUE_GREY="#546e7a"
DEEP_PURPLE="#5e35b1"
DEEP_ORANGE="#f4511e"
LIGHT_BLUE="#039be5"
LIGHT_GREEN="#7cb342"

# set ffmpeg defaults
ffmpeg() {
    command ffmpeg -hide_banner -loglevel error -nostdin "$@"
}

video_to_gif() {
    ffmpeg -i "$1" -vf palettegen -f image2 -c:v png - |
    ffmpeg -i "$1" -i - -filter_complex paletteuse "$2"
}

countdown() {
  notify-send "Screenshot" "Recording in 3 seconds" -t 1000
  sleep 1
  notify-send "Screenshot" "Recording in 2 seconds" -t 1000
  sleep 1
  notify-send "Screenshot" "Recording in 1 seconds" -t 1000
  sleep 1
}

crtc() {
  notify-send "Screenshot" "Select a region to capture"
  ffcast -q $(slop -n -f '-g %g ') png $HOME/.cache/screenshot_clip.png
  xclip -selection clipboard -t image/png $HOME/.cache/screenshot_clip.png
  rm $HOME/.cache/screenshot_clip.png
  notify-send "Screenshot" "Region copied to Clipboard"
}

crtf() {
  notify-send "Screenshot" "Select a region to capture"
  dt=$(date '+%d-%m-%Y %H:%M:%S')
  ffcast -q $(slop -n -f '-g %g ') png "$screenshot_directory/$dt.png"
  notify-send "Screenshot" "Region saved to $screenshot_directory"
}

cstc() {
  ffcast -q png $HOME/.cache/screenshot_clip.png
  xclip -selection clipboard -t image/png $HOME/.cache/screenshot_clip.png
  rm $HOME/.cache/screenshot_clip.png
  notify-send "Screenshot" "Screenshot copied to Clipboard"
}

cstf() {
  dt=$(date '+%d-%m-%Y %H:%M:%S')
  ffcast -q png "$screenshot_directory/$dt.png"
  notify-send "Screenshot" "Screenshot saved to $screenshot_directory"
}

rgrtf() {
  notify-send "Screenshot" "Select a region to record"
  dt=$(date '+%d-%m-%Y %H:%M:%S')
  ffcast -q $(slop -n -f '-g %g ' && countdown) rec $HOME/.cache/screenshot_gif.mp4
  notify-send "Screenshot" "Converting to gif... (this can take a while)"
  video_to_gif $HOME/.cache/screenshot_gif.mp4 "$screenshot_directory/$dt.gif"
  rm $HOME/.cache/screenshot_gif.mp4
  notify-send "Screenshot" "Recording saved to $screenshot_directory"
}

rgstf() {
  countdown
  dt=$(date '+%d-%m-%Y %H:%M:%S')
  ffcast -q rec $HOME/.cache/screenshot_gif.mp4
  notify-send "Screenshot" "Converting to gif... (this can take a while)"
  video_to_gif $HOME/.cache/screenshot_gif.mp4 "$screenshot_directory/$dt.gif"
  rm $HOME/.cache/screenshot_gif.mp4
  notify-send "Screenshot" "Recording saved to $screenshot_directory"
}

rvrtf() {
  notify-send "Screenshot" "Select a region to record"
  dt=$(date '+%d-%m-%Y %H:%M:%S')
  ffcast -q $(slop -n -f '-g %g ' && countdown) rec "$screenshot_directory/$dt.mp4"
  notify-send "Screenshot" "Recording saved to $screenshot_directory"
}

rstp() {
  $HOME/.config/polybar/scripts/screenshot -s
}

rvstf() {
  countdown
  dt=$(date '+%d-%m-%Y %H:%M:%S')
  ffcast -q rec "$screenshot_directory/$dt.mp4"
  notify-send "Screenshot" "Recording saved to $screenshot_directory"
}

get_options() {
  echo "⌿  Capture Region · Clipboard"
  echo "⌿  Capture Region · File"
  echo "⍂  Capture Screen · Clipboard"
  echo "⍂  Capture Screen · File"
  echo "---"
  echo "⌿ ⏵  Record Region · File (GIF)"
  echo "⍂ ⏵  Record Screen · File (GIF)"
  echo "⌿ ⏵  Record Region · File (MP4)"
  echo "⍂ ⏵  Record Screen · File (MP4)"
  echo "⏹  Stop recording"
}

check_deps() {
  if ! hash $1 2>/dev/null; then
    echo "Error: This script requires $1"
    exit 1
  fi
}

main() {
  # check dependencies
  check_deps slop
  check_deps ffcast
  check_deps ffmpeg
  check_deps xclip
  check_deps rofi

  if [[ $1 == '--help' ]] || [[ $1 = '-h' ]]
  then
    echo ### rofi-screenshot
    echo USAGE: rofi-screenshot [OPTION]
    echo \(no option\)
    echo "    show the screenshot menu"
    echo -s, --stop
    echo "    stop recording"
    echo -h, --help
    echo "    this screen"
    exit 1
  fi

  if [[ $1 = '--stop' ]] || [[ $1 = '-s' ]]
  then
    pkill -fxn '(/\S+)*ffmpeg\s.*\sx11grab\s.*'
    exit 1
  fi

  # Get choice from rofi
  choice=$( (get_options) | rofi -dmenu -i -fuzzy \
  -font "Fira Sans Mono 11" \
  -color-enabled true \
  -hide-scrollbar true \
  -line-padding 15 \
  -lines 10 \
  -bw 0 \
  -width 30 \
  -padding 15 \
  -columns 1 \
  -color-window "$BACKGROUND,$BORDER,$SEPARATOR" \
  -color-normal "$BACKGROUND_ALT,$FOREGROUND,$BACKGROUND_ALT,$HIGHLIGHT_BACKGROUND,$HIGHLIGHT_FOREGROUND" \
  -color-active "$BACKGROUND,$MAGENTA,$BACKGROUND_ALT,$HIGHLIGHT_BACKGROUND,$HIGHLIGHT_FOREGROUND" \
  -color-urgent "$BACKGROUND,$YELLOW,$BACKGROUND_ALT,$HIGHLIGHT_BACKGROUND,$HIGHLIGHT_FOREGROUND" \
  -p "Screenshot" )

  # If user has not picked anything, exit
  if [[ -z "${choice// }" ]]; then
      exit 1
  fi

  # run the selected command
  case $choice in
    '⌿  Capture Region · Clipboard')
      crtc
      ;;
    '⌿  Capture Region · File')
      crtf
      ;;
    '⍂  Capture Screen · Clipboard')
      cstc
      ;;
    '⍂  Capture Screen · File')
      cstf
      ;;
    '⌿ ⏵  Record Region · File (GIF)')
      rgrtf
      ;;
    '⍂ ⏵  Record Screen · File (GIF)')
      rgstf
      ;;
    '⌿ ⏵  Record Region · File (MP4)')
      rvrtf
      ;;
    '⍂ ⏵  Record Screen · File (MP4)')
      rvstf
      ;;
    '⏹  Stop recording')
      rstp
      ;;
  esac

  # done
  set -e
}

main $1 &

exit 0